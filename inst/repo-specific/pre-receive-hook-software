#!/usr/bin/env python

"""
Enable pre-receive git hooks to every software package in Bioconductor.
"""

import fileinput
from os import getcwd, path
from git_hook_utilities import get_hooks_conf
from prevent_bad_version_numbers import prevent_bad_version_numbers
from prevent_duplicate_commits import prevent_duplicate_commits
from prevent_large_files import prevent_large_files
from prevent_merge_markers import prevent_merge_markers


# Global variables used by pre-recieve hook for software packages
ZERO_COMMIT = "0000000000000000000000000000000000000000"


def read_bioc_conf(conf):
    """ Read the bioc hooks configuration file.

    This code is run within the 'hooks' folder inside a bare git repo.

    This function reads the hooks.conf file and returns a three tuple
    of boolean values, one for each hook if it is toggled False or True.

    Default is (True, True, True, True)
    """
    # Make dictionary with package name as key, values are [list of hooks]
    pkg_dict = {}
    res = [pack.strip().split("\n") for pack in conf.split("\n\n")]
    for item in res:
        pkg_dict[item[0]] = item[1:]
    # Get package name, it works because the script is run inside the package.
    package_name = path.basename(getcwd()).replace(".git", "")
    package = "Package: " + package_name
    # Default values for hooks is (True, True, True)
    hooks_dict = {"pre-receive-hook-merge-markers": True,
                  "pre-receive-hook-large-files": True,
                  "pre-receive-hook-version-numbers": True,
                  "pre-receive-hook-duplicate-commits": True}
    # Change values for specific hooks mentioned in hooks.conf
    if package in pkg_dict.keys():
        for hook in pkg_dict[package]:
            [hook, val] = hook.split(": ")
            hooks_dict[hook] = (val != "False")
    return hooks_dict


def apply_hooks(hooks_dict):
    """Apply hooks to each package.

    This function takes in a boolean list of arguments, one for each hook,
    1. prevent_merge_markers
    2. prevent_large_files
    3. prevent_bad_version_numbers,
    4. prevent_duplicate_commits in that order.

    The boolean values toggle True/False to indicate which hook has to be
    applied to the package.
    """
    newestrev = ZERO_COMMIT
    oldestrev = ZERO_COMMIT
    for line in fileinput.input():
        std_input = line.split(" ")
        oldrev, newrev, refname = [elt.strip() for elt in std_input]
        # Check for zero commit, check branch deletions
        if newrev == ZERO_COMMIT:
            continue
        # prevent merge conflict markers
        if hooks_dict["pre-receive-hook-merge-markers"]:  # enable hook
            prevent_merge_markers(oldrev, newrev, refname)
        # prevent large files
        if hooks_dict["pre-receive-hook-large-files"]:  # enable hook
            prevent_large_files(oldrev, newrev, refname)
        # prevent duplicate commits
        if hooks_dict["pre-receive-hook-duplicate-commits"]:  # enable hook
            prevent_duplicate_commits(oldrev, newrev, refname)
        if newestrev == ZERO_COMMIT:
            newestrev = newrev
        oldestrev = oldrev
    # prevent bad version numbers (enable hook)
    if (hooks_dict["pre-receive-hook-version-numbers"] and
            newestrev != ZERO_COMMIT):
        prevent_bad_version_numbers(oldestrev, newestrev, refname)
    return


if __name__ == "__main__":
    conf = get_hooks_conf()
    hooks_dict = read_bioc_conf(conf)
    apply_hooks(hooks_dict)
